from Rom import Rom
from Messages import read_messages, update_item_messages, repack_messages
from MQ import patch_files
from SaveContext import SaveContext


def patch_rom(rom:Rom, options):
    # Force language to be English in the event a Japanese rom was submitted
    rom.write_byte(0x3E, 0x45)

    # Fix 1.0 graves
    rom.write_byte(0x0202039D, 0x20)
    rom.write_byte(0x0202043C, 0x24)

    # Fix proximity text boxes (Navi) (Part 1)
    rom.write_bytes(0xDF8B84, [0x00, 0x00, 0x00, 0x00])

    # Speed Zelda's Letter scene
    rom.write_byte(0xEFCBA7, 0x08)
    rom.write_byte(0xEFE7C7, 0x05)
    rom.write_bytes(0xEFE938, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xEFE948, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xEFE950, [0x00, 0x00, 0x00, 0x00])

    # Speed Zelda escaping from Hyrule Castle
    Block_code = [0x00, 0x00, 0x00, 0x01, 0x00, 0x21, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]
    rom.write_bytes(0x1FC0CF8, Block_code)

    # Speed learning Saria's Song
    rom.write_int32(0x020B1734, 0x0000003C)                                  # Header: frame_count
    rom.write_int32s(0x20B1DA8, [0x00000013, 0x0000000C])                    # Textbox, Count
    rom.write_int16s(None, [0x0015, 0x0000, 0x0010, 0x0002, 0x088B, 0xFFFF]) # ID, start, end, type, alt1, alt2
    rom.write_int16s(None, [0x00D1, 0x0011, 0x0020, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
    rom.write_int32s(0x020B19C0, [0x0000000A, 0x00000006])                   # Link, Count
    rom.write_int16s(0x020B19C8, [0x0011, 0x0000, 0x0010, 0x0000])           # Action, start, end, ????
    rom.write_int16s(0x020B19F8, [0x003E, 0x0011, 0x0020, 0x0000])           # Action, start, end, ????
    rom.write_int32s(None,         [0x80000000,                              # ???
                                     0x00000000, 0x000001D4, 0xFFFFF731,     # start_XYZ
                                     0x00000000, 0x000001D4, 0xFFFFF712])    # end_XYZ

    # Speed learning Epona's Song
    rom.write_int32s(0x029BEF60, [0x000003E8, 0x00000001])                   # Terminator Execution
    rom.write_int16s(None, [0x005E, 0x000A, 0x000B, 0x000B])                 # ID, start, end, end         
    rom.write_int32s(0x029BECB0, [0x00000013, 0x00000002])                   # Textbox, Count
    rom.write_int16s(None, [0x00D2, 0x0000, 0x0009, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
    rom.write_int16s(None, [0xFFFF, 0x000A, 0x003C, 0xFFFF, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2

    # Speed learning Song of Time
    rom.write_int32s(0x0252FB98, [0x000003E8, 0x00000001])                   # Terminator Execution
    rom.write_int16s(None, [0x0035, 0x003B, 0x003C, 0x003C])                 # ID, start, end, end          
    rom.write_int32s(0x0252FC80, [0x00000013, 0x0000000C])                   # Textbox, Count
    rom.write_int16s(None, [0x0019, 0x0000, 0x0010, 0x0002, 0x088B, 0xFFFF]) # ID, start, end, type, alt1, alt2        
    rom.write_int16s(None, [0x00D5, 0x0011, 0x0020, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
    rom.write_int32(0x01FC3B84, 0xFFFFFFFF) # Other Header?: frame_count

    # Speed learning Song of Storms
    rom.write_int32(0x03041084, 0x0000000A)                                  # Header: frame_count
    rom.write_int32s(0x03041088, [0x00000013, 0x00000002])                   # Textbox, Count
    rom.write_int16s(None, [0x00D6, 0x0000, 0x0009, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
    rom.write_int16s(None, [0xFFFF, 0x00BE, 0x00C8, 0xFFFF, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2

    # Speed learning Nocturne of Shadow
    rom.write_int32s(0x01FFE458, [0x000003E8, 0x00000001])                   # Other Scene? Terminator Execution
    rom.write_int16s(None, [0x002F, 0x0001, 0x0002, 0x0002])                 # ID, start, end, end  
    rom.write_int32(0x01FFFDF4, 0x0000003C)                                  # Header: frame_count
    rom.write_int32s(0x02000FD8, [0x00000013, 0x0000000E])                   # Textbox, Count
    rom.write_int16s(None, [0x0013, 0x0000, 0x0010, 0x0002, 0x088B, 0xFFFF]) # ID, start, end, type, alt1, alt2
    rom.write_int16s(None, [0x0077, 0x0011, 0x0020, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
    rom.write_int32s(0x02000128, [0x000003E8, 0x00000001])                   # Terminator Execution
    rom.write_int16s(None, [0x0032, 0x003A, 0x003B, 0x003B])                 # ID, start, end, end  

    # Speed learning Requiem of Spirit
    rom.write_bytes(0x021A072C, [0x0F, 0x22])                                # Change time of day to A60C instead of 8000
    rom.write_int32(0x0218AF14, 0x0000003C)                                  # Header: frame_count
    rom.write_int32s(0x0218C574, [0x00000013, 0x00000008])                   # Textbox, Count
    rom.write_int16s(None, [0x0012, 0x0000, 0x0010, 0x0002, 0x088B, 0xFFFF]) # ID, start, end, type, alt1, alt2       
    rom.write_int16s(None, [0x0076, 0x0011, 0x0020, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
    rom.write_int32s(0x0218B478, [0x000003E8, 0x00000001])                   # Terminator Execution
    rom.write_int16s(None, [0x0030, 0x003A, 0x003B, 0x003B])                 # ID, start, end, end  
    rom.write_int32s(0x0218AF18, [0x0000000A, 0x0000000B])                   # Link, Count
    rom.write_int16s(0x0218AF20, [0x0011, 0x0000, 0x0010, 0x0000])           # Action, start, end, ????
    rom.write_int32s(None,         [0x40000000,                              # ???
                                     0xFFFFFAF9, 0x00000008, 0x00000001,     # start_XYZ
                                     0xFFFFFAF9, 0x00000008, 0x00000001,     # end_XYZ
                                     0x0F671408, 0x00000000, 0x00000001])    # normal_XYZ
    rom.write_int16s(0x0218AF50, [0x003E, 0x0011, 0x0020, 0x0000])           # Action, start, end, ????

    if options['song_speedup']:
        # Speed learning Zelda's Lullaby
        rom.write_int32s(0x02E8E90C, [0x000003E8, 0x00000001])                   # Terminator Execution
        rom.write_int16s(None, [0x0073, 0x003B, 0x003C, 0x003C])                 # ID, start, end, end  
        rom.write_int32s(0x02E8E91C, [0x00000013, 0x0000000C])                   # Textbox, Count
        rom.write_int16s(None, [0x0017, 0x0000, 0x0010, 0x0002, 0x088B, 0xFFFF]) # ID, start, end, type, alt1, alt2        
        rom.write_int16s(None, [0x00D4, 0x0011, 0x0020, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
    
        # Speed learning Minuet of Forest
        rom.write_int32(0x020AFF84, 0x0000003C)                                  # Header: frame_count
        rom.write_int32s(0x020B0800, [0x00000013, 0x0000000A])                   # Textbox, Count
        rom.write_int16s(None, [0x000F, 0x0000, 0x0010, 0x0002, 0x088B, 0xFFFF]) # ID, start, end, type, alt1, alt2
        rom.write_int16s(None, [0x0073, 0x0011, 0x0020, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
        rom.write_int32s(0x020AFF88, [0x0000000A, 0x00000005])                   # Link, Count
        rom.write_int16s(0x020AFF90, [0x0011, 0x0000, 0x0010, 0x0000])           # Action, start, end, ????
        rom.write_int16s(0x020AFFC1, [0x003E, 0x0011, 0x0020, 0x0000])           # Action, start, end, ????
        rom.write_int32s(0x020B0488, [0x00000056, 0x00000001])                   # Music Change, Count
        rom.write_int16s(None, [0x003F, 0x0021, 0x0022, 0x0000])                 # Action, start, end, ????
        rom.write_int32s(0x020B04C0, [0x0000007C, 0x00000001])                   # Music Fade Out, Count
        rom.write_int16s(None, [0x0004, 0x0000, 0x0000, 0x0000])                 # Action, start, end, ????
    
        # Speed learning Bolero of Fire
        rom.write_int32(0x0224B5D4, 0x0000003C)                                  # Header: frame_count
        rom.write_int32s(0x0224D7E8, [0x00000013, 0x0000000A])                   # Textbox, Count
        rom.write_int16s(None, [0x0010, 0x0000, 0x0010, 0x0002, 0x088B, 0xFFFF]) # ID, start, end, type, alt1, alt2
        rom.write_int16s(None, [0x0074, 0x0011, 0x0020, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
        rom.write_int32s(0x0224B5D8, [0x0000000A, 0x0000000B])                   # Link, Count
        rom.write_int16s(0x0224B5E0, [0x0011, 0x0000, 0x0010, 0x0000])           # Action, start, end, ????
        rom.write_int16s(0x0224B610, [0x003E, 0x0011, 0x0020, 0x0000])           # Action, start, end, ????
        rom.write_int32s(0x0224B7F0, [0x0000002F, 0x0000000E])                   # Sheik, Count
        rom.write_int16s(0x0224B7F8, [0x0000])                                   # Action
        rom.write_int16s(0x0224B828, [0x0000])                                   # Action
        rom.write_int16s(0x0224B858, [0x0000])                                   # Action
        rom.write_int16s(0x0224B888, [0x0000])                                   # Action
    
        # Speed learning Serenade of Water
        rom.write_int32(0x02BEB254, 0x0000003C)                                  # Header: frame_count
        rom.write_int32s(0x02BEC880, [0x00000013, 0x00000010])                   # Textbox, Count
        rom.write_int16s(None, [0x0011, 0x0000, 0x0010, 0x0002, 0x088B, 0xFFFF]) # ID, start, end, type, alt1, alt2
        rom.write_int16s(None, [0x0075, 0x0011, 0x0020, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
        rom.write_int32s(0x02BEB258, [0x0000000A, 0x0000000F])                   # Link, Count
        rom.write_int16s(0x02BEB260, [0x0011, 0x0000, 0x0010, 0x0000])           # Action, start, end, ????
        rom.write_int16s(0x02BEB290, [0x003E, 0x0011, 0x0020, 0x0000])           # Action, start, end, ????
        rom.write_int32s(0x02BEB530, [0x0000002F, 0x00000006])                   # Sheik, Count
        rom.write_int16s(0x02BEB538, [0x0000, 0x0000, 0x018A, 0x0000])           # Action, start, end, ????
        rom.write_int32s(None,         [0x1BBB0000,                              # ???
                                         0xFFFFFB10, 0x8000011A, 0x00000330,     # start_XYZ
                                         0xFFFFFB10, 0x8000011A, 0x00000330])    # end_XYZ
        rom.write_int32s(0x02BEC848, [0x00000056, 0x00000001])                   # Music Change, Count
        rom.write_int16s(None, [0x0059, 0x0021, 0x0022, 0x0000])                 # Action, start, end, ????
    
        # Speed learning Prelude of Light
        rom.write_int32(0x0252FD24, 0x0000003C)                                  # Header: frame_count
        rom.write_int32s(0x02531320, [0x00000013, 0x0000000E])                   # Textbox, Count
        rom.write_int16s(None, [0x0014, 0x0000, 0x0010, 0x0002, 0x088B, 0xFFFF]) # ID, start, end, type, alt1, alt2
        rom.write_int16s(None, [0x0078, 0x0011, 0x0020, 0x0000, 0xFFFF, 0xFFFF]) # ID, start, end, type, alt1, alt2
        rom.write_int32s(0x0252FF10, [0x0000002F, 0x00000009])                   # Sheik, Count
        rom.write_int16s(0x0252FF18, [0x0006, 0x0000, 0x0000, 0x0000])           # Action, start, end, ????
        rom.write_int32s(0x025313D0, [0x00000056, 0x00000001])                   # Music Change, Count
        rom.write_int16s(None, [0x003B, 0x0021, 0x0022, 0x0000])                 # Action, start, end, ????

    #Fix backwalk issue for Fairy Fountains
    rom.write_bytes(0xC8A5C4, [0x10, 0x00, 0x00, 0x2F]) # Branch to end of funtion
    rom.write_bytes(0xC8A5C8, [0xAE, 0x00, 0x00, 0x28]) # Keep fairy still
    rom.write_bytes(0xC8A684, [0xA2, 0x0C, 0x00, 0xB4]) # Rotate fairy under the floor
    rom.write_bytes(0xC8BE84, [0x00, 0x00, 0x00, 0x00]) # 0 out relocation table for jump

    # Speed Magic Meter Great Fairy
    rom.write_bytes(0x2CF7136, [0x00, 0x70])
    rom.write_bytes(0x2CF7144, [0x00, 0x56])
    rom.write_bytes(0x2CF7171, [0x13, 0x00, 0x57])
    rom.write_bytes(0x2CF7299, [0x02, 0x00, 0x00, 0x00, 0x50])
    rom.write_bytes(0x2CF72C9, [0x03, 0x00, 0x51, 0x00, 0x52])
    rom.write_bytes(0x2CF72F9, [0x04, 0x00, 0x53, 0x00, 0x54])
    rom.write_bytes(0x2CF7329, [0x13, 0x00, 0x55, 0x00, 0x56])
    rom.write_bytes(0x2CF7359, [0x0A, 0x00, 0x57, 0x00, 0x59])
    rom.write_bytes(0x2CF7389, [0x07, 0x00, 0x5A, 0x00, 0x5B])
    rom.write_bytes(0x2CF73B9, [0x0D, 0x00, 0x5C, 0x00, 0x5D])
    rom.write_bytes(0x2CF8344, [0x00, 0x56])
    rom.write_bytes(0x2CF834C, [0x00, 0xDD, 0x00, 0x57, 0x00, 0x59])
    rom.write_bytes(0x2CF83AA, [0x00, 0x56, 0x00, 0x57])

    # Speed Double Magic Meter Great Fairy
    rom.write_bytes(0x2CF83E6, [0x00, 0x70])
    rom.write_bytes(0x2CF83F4, [0x00, 0x56])
    rom.write_bytes(0x2CF8421, [0x13, 0x00, 0x57])
    rom.write_bytes(0x2CF8549, [0x02, 0x00, 0x00, 0x00, 0x50])
    rom.write_bytes(0x2CF8579, [0x03, 0x00, 0x51, 0x00, 0x52])
    rom.write_bytes(0x2CF85A9, [0x05, 0x00, 0x53, 0x00, 0x54])
    rom.write_bytes(0x2CF85D9, [0x14, 0x00, 0x55, 0x00, 0x56])
    rom.write_bytes(0x2CF8609, [0x0B, 0x00, 0x57, 0x00, 0x59])
    rom.write_bytes(0x2CF8639, [0x07, 0x00, 0x5A, 0x00, 0x5B])
    rom.write_bytes(0x2CF8669, [0x0D, 0x00, 0x5C, 0x00, 0x5D])
    rom.write_bytes(0x2CF877C, [0x00, 0x56])
    rom.write_bytes(0x2CF8784, [0x00, 0xE4, 0x00, 0x57, 0x00, 0x59])
    rom.write_bytes(0x2CF87E2, [0x00, 0x56, 0x00, 0x57])

    # Speed Double Defense Great Fairy
    rom.write_bytes(0x2CF95D6, [0x00, 0x60])
    rom.write_bytes(0x2CF95E4, [0x00, 0x4A])
    rom.write_bytes(0x2CF9611, [0x13, 0x00, 0x4B])
    rom.write_bytes(0x2CF9739, [0x02, 0x00, 0x00, 0x00, 0x40])
    rom.write_bytes(0x2CF9769, [0x03, 0x00, 0x41, 0x00, 0x42])
    rom.write_bytes(0x2CF9799, [0x06, 0x00, 0x43, 0x00, 0x44])
    rom.write_bytes(0x2CF97C9, [0x15, 0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2CF97F9, [0x0C, 0x00, 0x47, 0x00, 0x49])
    rom.write_bytes(0x2CF9829, [0x12, 0x00, 0x4A, 0x00, 0x54])
    rom.write_bytes(0x2CF9859, [0x07, 0x00, 0x55, 0x00, 0x56])
    rom.write_bytes(0x2CF9889, [0x0D, 0x00, 0x57, 0x00, 0x58])
    rom.write_bytes(0x2CF999C, [0x00, 0x4A])
    rom.write_bytes(0x2CF99A4, [0x00, 0xE5, 0x00, 0x4B, 0x00, 0x53])
    rom.write_bytes(0x2CF9A02, [0x00, 0x4A, 0x00, 0x4B])

    # Speed Zora Fountain Great Fairy
    rom.write_bytes(0x2D20166, [0x00, 0x50])
    rom.write_bytes(0x2D20174, [0x00, 0x45])
    rom.write_bytes(0x2D201A1, [0x13, 0x00, 0x46])
    rom.write_bytes(0x2D20299, [0x02, 0x00, 0x00, 0x00, 0x40])
    rom.write_bytes(0x2D202C9, [0x03, 0x00, 0x41, 0x00, 0x42])
    rom.write_bytes(0x2D202F9, [0x04, 0x00, 0x43, 0x00, 0x44])
    rom.write_bytes(0x2D20329, [0x0E, 0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D20359, [0x11, 0x00, 0x47, 0x00, 0x4A])
    rom.write_bytes(0x2D20389, [0x0D, 0x00, 0x4B, 0x00, 0x4C])
    rom.write_bytes(0x2D20552, [0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D2058C, [0x00, 0x45])
    rom.write_bytes(0x2D20595, [0xAE, 0x00, 0x46, 0x00, 0x48])

    # Speed Castle Great Fairy
    rom.write_bytes(0x2D21026, [0x00, 0x50])
    rom.write_bytes(0x2D21034, [0x00, 0x45])
    rom.write_bytes(0x2D21061, [0x13, 0x00, 0x46])
    rom.write_bytes(0x2D21159, [0x02, 0x00, 0x00, 0x00, 0x40])
    rom.write_bytes(0x2D21189, [0x03, 0x00, 0x41, 0x00, 0x42])
    rom.write_bytes(0x2D211B9, [0x05, 0x00, 0x43, 0x00, 0x44])
    rom.write_bytes(0x2D211E9, [0x0F, 0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D21219, [0x11, 0x00, 0x47, 0x00, 0x4A])
    rom.write_bytes(0x2D21249, [0x0D, 0x00, 0x4B, 0x00, 0x4C])
    rom.write_bytes(0x2D21E3A, [0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D21E74, [0x00, 0x45])
    rom.write_bytes(0x2D21E7D, [0xAD, 0x00, 0x46, 0x00, 0x48])

    # Speed Colossus Great Fairy
    rom.write_bytes(0x2D21F46, [0x00, 0x50])
    rom.write_bytes(0x2D21F54, [0x00, 0x45])
    rom.write_bytes(0x2D21F81, [0x13, 0x00, 0x46])
    rom.write_bytes(0x2D22079, [0x02, 0x00, 0x00, 0x00, 0x40])
    rom.write_bytes(0x2D220A9, [0x03, 0x00, 0x41, 0x00, 0x42])
    rom.write_bytes(0x2D220D9, [0x06, 0x00, 0x43, 0x00, 0x44])
    rom.write_bytes(0x2D22109, [0x10, 0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D22139, [0x11, 0x00, 0x47, 0x00, 0x4A])
    rom.write_bytes(0x2D22169, [0x0D, 0x00, 0x4B, 0x00, 0x4C])
    rom.write_bytes(0x2D22332, [0x00, 0x45, 0x00, 0x46])
    rom.write_bytes(0x2D2236C, [0x00, 0x45])
    rom.write_bytes(0x2D22375, [0xAF, 0x00, 0x46, 0x00, 0x48])

    # Speed Nabooru defeat scene
    rom.write_bytes(0x2F5AF84, [0x00, 0x00, 0x00, 0x05])
    rom.write_bytes(0x2F5C7DA, [0x00, 0x01, 0x00, 0x02])
    rom.write_bytes(0x2F5C7A2, [0x00, 0x03, 0x00, 0x04])
    rom.write_byte(0x2F5B369, 0x09)
    rom.write_byte(0x2F5B491, 0x04)
    rom.write_byte(0x2F5B559, 0x04)
    rom.write_byte(0x2F5B621, 0x04)
    rom.write_byte(0x2F5B761, 0x07)
    #fix position for cs skip
    rom.write_bytes(0x2F61072, [0xFB, 0x0D])
    rom.write_bytes(0x2F61076, [0x04, 0xF3])

    # Speed collapse of Ganon's Tower
    rom.write_bytes(0x33FB328, [0x00, 0x76, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])

    # Speed Phantom Ganon defeat scene
    rom.write_bytes(0xC944D8, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xC94548, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xC94730, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xC945A8, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xC94594, [0x00, 0x00, 0x00, 0x00])

    # Speed Twinrova defeat scene
    rom.write_bytes(0xD678CC, [0x24, 0x01, 0x03, 0xA2, 0xA6, 0x01, 0x01, 0x42])
    rom.write_bytes(0xD67BA4, [0x10, 0x00])

    # Ganondorf battle end
    rom.write_byte(0xD82047, 0x09)

    # Zelda descends
    rom.write_byte(0xD82AB3, 0x66)
    rom.write_byte(0xD82FAF, 0x65)
    rom.write_bytes(0xD82D2E, [0x04, 0x1F])
    rom.write_bytes(0xD83142, [0x00, 0x6B])
    rom.write_bytes(0xD82DD8, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xD82ED4, [0x00, 0x00, 0x00, 0x00])
    rom.write_byte(0xD82FDF, 0x33)

    # After tower collapse
    rom.write_byte(0xE82E0F, 0x04)

    # Ganon intro
    rom.write_bytes(0xE83D28, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xE83B5C, [0x00, 0x00, 0x00, 0x00])
    rom.write_bytes(0xE84C80, [0x10, 0x00])

    # Speed completion of the trials in Ganon's Castle
    rom.write_bytes(0x31A8090, [0x00, 0x6B, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Forest
    rom.write_bytes(0x31A9E00, [0x00, 0x6E, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Fire
    rom.write_bytes(0x31A8B18, [0x00, 0x6C, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Water
    rom.write_bytes(0x31A9430, [0x00, 0x6D, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Shadow
    rom.write_bytes(0x31AB200, [0x00, 0x70, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Spirit
    rom.write_bytes(0x31AA830, [0x00, 0x6F, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) #Light

    # Speed Silver Gaunts cs to avoid crash
    rom.write_bytes(0x0218D51A, [0x00, 0x45, 0x00, 0x46]) #Move start and end frame of terminate command before first text box

    # Speed obtaining Fairy Ocarina
    rom.write_bytes(0x2151230, [0x00, 0x72, 0x00, 0x3C, 0x00, 0x3D, 0x00, 0x3D])
    Block_code = [0x00, 0x4A, 0x00, 0x00, 0x00, 0x3A, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
                  0xFF, 0xFF, 0x00, 0x3C, 0x00, 0x81, 0xFF, 0xFF]
    rom.write_bytes(0x2151240, Block_code)
    rom.write_bytes(0x2150E20, [0xFF, 0xFF, 0xFA, 0x4C])

    # Speed Zelda Light Arrow cutscene
    rom.write_bytes(0x2531B40, [0x00, 0x20, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02]) # Load into flashback ASAP
    rom.write_bytes(0x01FC28C8, [0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]) # Load into tot ASAP
    rom.write_bytes(0x2532FBC, [0x00, 0x75])
    rom.write_bytes(0x2532FEA, [0x00, 0x75, 0x00, 0x80])  
    rom.write_byte(0x2533115, 0x05)
    rom.write_bytes(0x2533141, [0x06, 0x00, 0x06, 0x00, 0x10])
    rom.write_bytes(0x2533171, [0x0F, 0x00, 0x11, 0x00, 0x40])
    rom.write_bytes(0x25331A1, [0x07, 0x00, 0x41, 0x00, 0x65])
    rom.write_bytes(0x2533642, [0x00, 0x50])
    rom.write_byte(0x253389D, 0x74)
    rom.write_bytes(0x25338A4, [0x00, 0x72, 0x00, 0x75, 0x00, 0x79])
    rom.write_bytes(0x25338BC, [0xFF, 0xFF])
    rom.write_bytes(0x25338C2, [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF])
    rom.write_bytes(0x25339C2, [0x00, 0x75, 0x00, 0x76])
    rom.write_bytes(0x2533830, [0x00, 0x31, 0x00, 0x81, 0x00, 0x82, 0x00, 0x82])

    # Speed Bridge of Light cutscene
    rom.write_bytes(0x292D644, [0x00, 0x00, 0x00, 0xA0])
    rom.write_bytes(0x292D680, [0x00, 0x02, 0x00, 0x0A, 0x00, 0x6C, 0x00, 0x00])
    rom.write_bytes(0x292D6E8, [0x00, 0x27])
    rom.write_bytes(0x292D718, [0x00, 0x32])
    rom.write_bytes(0x292D810, [0x00, 0x02, 0x00, 0x3C])
    rom.write_bytes(0x292D924, [0xFF, 0xFF, 0x00, 0x14, 0x00, 0x96, 0xFF, 0xFF])

    #Speed Pushing of All Pushable Objects
    rom.write_bytes(0xDD2B86, [0x40, 0x80])             #block speed
    rom.write_bytes(0xDD2D26, [0x00, 0x03])             #block delay
    rom.write_bytes(0xDD9682, [0x40, 0x80])             #milk crate speed
    rom.write_bytes(0xDD981E, [0x00, 0x03])             #milk crate delay
    rom.write_bytes(0xCE1BD0, [0x40, 0x80, 0x00, 0x00]) #amy puzzle speed
    rom.write_bytes(0xCE0F0E, [0x00, 0x03])             #amy puzzle delay
    rom.write_bytes(0xC77CA8, [0x40, 0x80, 0x00, 0x00]) #fire block speed
    rom.write_bytes(0xC770C2, [0x00, 0x01])             #fire block delay
    rom.write_bytes(0xCC5DBC, [0x29, 0xE1, 0x00, 0x01]) #forest basement puzzle delay
    rom.write_bytes(0xDBB5E8, [0x2B, 0x01, 0x00, 0x00]) #spirit cobra mirror startup #might remove
    rom.write_bytes(0xDBCF70, [0x2B, 0x01, 0x00, 0x01]) #spirit cobra mirror delay
    rom.write_bytes(0xDBA230, [0x28, 0x41, 0x00, 0x19]) #truth spinner speed
    rom.write_bytes(0xDBA3A4, [0x24, 0x18, 0x00, 0x00]) #truth spinner delay

    # Remove remaining owls
    rom.write_bytes(0x1FE30CE, [0x01, 0x4B])
    rom.write_bytes(0x1FE30DE, [0x01, 0x4B])
    rom.write_bytes(0x1FE30EE, [0x01, 0x4B])
    rom.write_bytes(0x205909E, [0x00, 0x3F])
    rom.write_byte(0x2059094, 0x80)

    # Fix Ice Cavern Alcove Camera
    rom.write_byte(0x2BECA25,0x01)
    rom.write_byte(0x2BECA2D,0x01)

    # Speed Jabu Jabu swallowing Link
    rom.write_bytes(0xCA0784, [0x00, 0x18, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])

    # Ruto no longer points to Zora Sapphire
    rom.write_bytes(0xD03BAC, [0xFF, 0xFF, 0xFF, 0xFF])

    #Move fire/forest temple switches down 1 unit to make it easier to press
    rom.write_bytes(0x24860A8, [0xFC, 0xF4]) #forest basement 1
    rom.write_bytes(0x24860C8, [0xFC, 0xF4]) #forest basement 2
    rom.write_bytes(0x24860E8, [0xFC, 0xF4]) #forest basement 3
    rom.write_bytes(0x236C148, [0x11, 0x93]) #fire hammer room

    # Speed up Epona race start
    rom.write_bytes(0x29BE984, [0x00, 0x00, 0x00, 0x02])
    rom.write_bytes(0x29BE9CA, [0x00, 0x01, 0x00, 0x02])

    # Speed up Epona escape
    rom.write_bytes(0x1FC8B36, [0x00, 0x2A])

    # Speed up draining the well
    rom.write_bytes(0xE0A010, [0x00, 0x2A, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02])
    rom.write_bytes(0x2001110, [0x00, 0x2B, 0x00, 0xB7, 0x00, 0xB8, 0x00, 0xB8])

    # Speed up opening the royal tomb for both child and adult
    rom.write_bytes(0x2025026, [0x00, 0x01])
    rom.write_bytes(0x2023C86, [0x00, 0x01])
    rom.write_byte(0x2025159, 0x02)
    rom.write_byte(0x2023E19, 0x02)

    #Speed opening of Door of Time
    rom.write_bytes(0xE0A176, [0x00, 0x02])
    rom.write_bytes(0xE0A35A, [0x00, 0x01, 0x00, 0x02])

    # Speed up Lake Hylia Owl Flight
    rom.write_bytes(0x20E60D2, [0x00, 0x01])

    # Speed up Death Mountain Trail Owl Flight
    rom.write_bytes(0x223B6B2, [0x00, 0x01])

    # Allow Warp Songs in additional places
    rom.write_byte(0xB6D3D2, 0x00) # Gerudo Training Ground
    rom.write_byte(0xB6D42A, 0x00) # Inside Ganon's Castle

    # Allow Farore's Wind in dungeons where it's normally forbidden
    rom.write_byte(0xB6D3D3, 0x00) # Gerudo Training Ground
    rom.write_byte(0xB6D42B, 0x00) # Inside Ganon's Castle

    # Remove disruptive text from Gerudo Training Ground and early Shadow Temple (vanilla)
    Wonder_text = [0x27C00BC, 0x27C00CC, 0x27C00DC, 0x27C00EC, 0x27C00FC, 0x27C010C, 0x27C011C, 0x27C012C, 0x27CE080,
                   0x27CE090, 0x2887070, 0x2887080, 0x2887090, 0x2897070, 0x28C7134, 0x28D91BC, 0x28A60F4, 0x28AE084,
                   0x28B9174, 0x28BF168, 0x28BF178, 0x28BF188, 0x28A1144, 0x28A6104, 0x28D0094]
    for address in Wonder_text:
        rom.write_byte(address, 0xFB)

    # Initial Save Data
    save_context = SaveContext()

    save_context.write_bits(0x00D4 + 0x55 * 0x1C + 0x04 + 0x0, 0x80) # Kokiri Forest switch flag (Kokiri Shop Girl)

    save_context.write_bits(0x00D4 + 0x51 * 0x1C + 0x04 + 0x2, 0x08) # Hyrule Field switch flag (Owl)
    save_context.write_bits(0x00D4 + 0x56 * 0x1C + 0x04 + 0x2, 0x40) # Sacred Forest Meadow switch flag (Owl)
    save_context.write_bits(0x00D4 + 0x5B * 0x1C + 0x04 + 0x2, 0x01) # Lost Woods switch flag (Owl)
    save_context.write_bits(0x00D4 + 0x5B * 0x1C + 0x04 + 0x3, 0x80) # Lost Woods switch flag (Owl)
    save_context.write_bits(0x00D4 + 0x5C * 0x1C + 0x04 + 0x0, 0x80) # Desert Colossus switch flag (Owl)
    save_context.write_bits(0x00D4 + 0x5F * 0x1C + 0x04 + 0x3, 0x20) # Hyrule Castle switch flag (Owl)
    save_context.write_bits(0x0EE0, 0x80) # "Spoke to Kaepora Gaebora by Lost Woods"

    save_context.write_bits(0x0EDA, 0x08) # "Began Nabooru Battle"
    save_context.write_bits(0x0EDC, 0x80) # "Entered the Master Sword Chamber"
    save_context.write_bits(0x00D4 + 0x05 * 0x1C + 0x04 + 0x1, 0x01) # Water temple switch flag (Ruto)

    save_context.write_bits(0x0EE7, 0x10) # "Spoke to Nabooru in Spirit Temple"
    save_context.write_bits(0x0EED, 0x20) # "Sheik, Spawned at Master Sword Pedestal as Adult"
    save_context.write_bits(0x0EED, 0x01) # "Nabooru Ordered to Fight by Twinrova"
    save_context.write_bits(0x0F0A, 0x04) # "Spoke to Ingo Once as Adult"

    save_context.write_bits(0x0F21, 0x04) # "Ruto in JJ (M3) Talk First Time"
    save_context.write_bits(0x0F21, 0x02) # "Ruto in JJ (M2) Meet Ruto"

    save_context.write_bits(0x0EE2, 0x01) # "Began Ganondorf Battle"
    save_context.write_bits(0x0EE3, 0x80) # "Began Bongo Bongo Battle"
    save_context.write_bits(0x0EE3, 0x40) # "Began Barinade Battle"
    save_context.write_bits(0x0EE3, 0x20) # "Began Twinrova Battle"
    save_context.write_bits(0x0EE3, 0x10) # "Began Morpha Battle"
    save_context.write_bits(0x0EE3, 0x08) # "Began Volvagia Battle"
    save_context.write_bits(0x0EE3, 0x04) # "Began Phantom Ganon Battle"
    save_context.write_bits(0x0EE3, 0x02) # "Began King Dodongo Battle"
    save_context.write_bits(0x0EE3, 0x01) # "Began Gohma Battle"

    #Static Intro CS
    save_context.write_bits(0x0EE9, 0x80) # "Entered Temple of Time"
    save_context.write_bits(0x0EEA, 0x04) # "Entered Ganon's Castle (Exterior)"
    save_context.write_bits(0x0EEB, 0x10) # "Entered Lon Lon Ranch"
    save_context.write_bits(0x0F08, 0x08) # "Entered Hyrule Castle"

    save_context.write_bits(0x0EE9, 0x01) # "Entered Hyrule Field"
    save_context.write_bits(0x0EE9, 0x20) # "Entered Hyrule Castle"
    save_context.write_bits(0x0EE9, 0x08) # "Entered Kakariko Village"
    save_context.write_bits(0x0EEB, 0x40) # "Entered Graveyard"
    save_context.write_bits(0x0EE9, 0x02) # "Entered Death Mountain Trail"
    save_context.write_bits(0x0EE9, 0x40) # "Entered Goron City"
    save_context.write_bits(0x0EEA, 0x02) # "Entered Death Mountain Crater"
    save_context.write_bits(0x0EE9, 0x10) # "Entered Zora's Domain"
    save_context.write_bits(0x0EEB, 0x80) # "Entered Zora's Fountain"
    save_context.write_bits(0x0EEB, 0x02) # "Entered Lake Hylia"
    save_context.write_bits(0x0EEB, 0x04) # "Entered Gerudo Valley"
    save_context.write_bits(0x0EEB, 0x08) # "Entered Gerudo's Fortress"
    save_context.write_bits(0x0EEA, 0x01) # "Entered Desert Colossus"
    save_context.write_bits(0x0EE8, 0x01) # "Entered Deku Tree"
    save_context.write_bits(0x0EEB, 0x01) # "Entered Dodongo's Cavern"
    save_context.write_bits(0x0EEB, 0x20) # "Entered Jabu-Jabu's Belly"

    if options['mq_enabled']:
        mq_scenes = [
            0, # Deku Tree
            1, # Dodongos Cavern
            2, # Jabu Jabus Belly
            3, # Forest Temple
            4, # Fire Temple
            5, # Water Temple
            6, # Spirit Temple
            7, # Shadow Temple
            8, # Bottom of the Well
            9, # Ice Cavern
            11, # Gerudo Training Ground
            13 # Ganons Castle
        ]
        patch_files(rom, mq_scenes)

    # Bonk One Hit KO
    if options['bonko']:
        rom.write_int32(rom.sym('CFG_DEADLY_BONKS'), 1)
        rom.write_int16(rom.sym('CFG_BONK_DAMAGE'), 0xFFFE)

    # Load Message and Shop Data
    messages = read_messages(rom)

    # Set default targeting option to Hold
    rom.write_byte(0xB71E6D, 0x01)

    # reduce item message lengths
    update_item_messages(messages)

    repack_messages(rom, messages)

    # actually write the save table to rom
    save_context.write_save_table(rom)

    rom.write_int32(rom.sym('CFG_DUNGEON_INFO_ENABLE'), 1)
    rom.write_int32(rom.sym('CFG_WORLD_MAP_INFO_ENABLE'), 1)
